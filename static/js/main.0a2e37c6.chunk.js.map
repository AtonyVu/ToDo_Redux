{"version":3,"sources":["todolist/item-task.js","todolist/list-task.js","todolist/add-task.js","todolist/index.js","App.js","reportWebVitals.js","Redux/Reducer/task.js","Redux/Reducer/index.js","index.js"],"names":["ItemTask","dataTask","this","props","className","textTask","onClick","DETETE_TASK","UPDATE_TASK","Component","connect","dispatch","task","type","payload","ListTask","renderTable","renderUncomplete","dataList","map","item","status","id","rendercomplete","state","taskReducer","AddTask","placeholder","onChange","event","getvalue","target","value","ADD_TASK","Todolist","src","style","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","vitri","findIndex","deletaTask","splice","UpdateTask","addTask","newTask","Math","random","push","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a2e37c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {connect}from 'react-redux'\n class ItemTask extends Component {\n  render() {\n    const { dataTask} =this.props;\n    return (\n      <li>\n        <span className=\"liName\">{dataTask.textTask}</span>\n        <span>\n        <i className=\"fa fa-trash\" onClick={()=>this.props.DETETE_TASK(dataTask)}></i>\n        <i className=\"fa fa-check-circle\" onClick={()=>this.props.UPDATE_TASK(dataTask)}></i>\n        </span>\n      </li>\n    );\n  }\n}\nconst mapDispatchToProps =(dispatch)=>{\n   return({\n       DETETE_TASK:(task)=>{\n             const action  ={\n               type:\"DELETE_TASK\",\n               payload:task,\n             }\n             dispatch(action);\n       },\n       UPDATE_TASK:(task)=>{\n        const action  ={\n          type:\"UPDATE_TASK\",\n          payload:task,\n        }\n        dispatch(action);\n  }\n   })\n}\nexport default connect(null,mapDispatchToProps) (ItemTask)","import React, { Component } from \"react\";\nimport ItemTask from \"./item-task\";\nimport {connect} from 'react-redux'\n class ListTask extends Component {\n   renderTable = ()=>{\n  \n \n  \n   }\n   renderUncomplete=()=>{\n    const {dataList}=this.props;\n   return    dataList.map((item)=>{\n     if(item.status==='uncomple')\n     {\n       return(\n        <ItemTask key={item.id} dataTask={item}/>\n       )\n     \n     }\n    })\n   }\n   rendercomplete=()=>{\n    const {dataList}=this.props;\n   return    dataList.map((item)=>{\n     if(item.status==='comple')\n     {\n       return(\n        <ItemTask dataTask={item} key={item.id}/>\n       )\n     \n     }\n    })\n   }\n  render() {\n    return (\n      <>\n        <ul className=\"todo\" id=\"todo\">\n           {this.renderUncomplete()}\n      </ul>\n      <br/>\n      <ul className=\"todo\" id=\"completed\">\n          {this.rendercomplete()}\n     </ul>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps =(state)=>{\n     return {\n       dataList:state.taskReducer.dataList\n     }\n}\n\nexport default connect(mapStateToProps,null)(ListTask)\n","import React, { Component } from \"react\";\nimport {connect} from 'react-redux'\nclass AddTask extends Component {\n  constructor(props)\n  {\n      super(props);\n      let getvalue;\n  }\n  render() {\n    return (\n      <>\n        <input id=\"newTask\" type=\"text\" placeholder=\"Enter an activity...\" onChange={(event)=>{this.getvalue=event.target.value}} />\n        <button id=\"addItem\">\n          <i className='fa fa-plus' onClick={()=>{this.props.ADD_TASK(this.getvalue)}}/>\n        </button>\n      </>\n    );\n  }\n  \n}\nconst mapDispatchToProps=(dispatch)=>{\n  return({  \n    ADD_TASK:(task)=>{\n    const action = {\n      type:\"ADD_TASK\",\n      payload:task\n    }\n    dispatch(action)\n  }})\n   \n}\nexport default  connect(null,mapDispatchToProps)(AddTask);","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport ListTask from \"./list-task\";\nimport AddTask from \"./add-task\";\n\nexport default class Todolist extends Component {\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"card__header\">\n          <img src=\"./img/X2oObC4.png\" />\n        </div>\n        <div className=\"card__body\">\n          <div className=\"card__content\">\n            <div className=\"card__title\">\n              <h2>My Tasks</h2>\n              <p>September 9,2020</p>\n            </div>\n            <div className=\"card__add\">\n              <AddTask />\n            </div>\n            <div id=\"validation\" style={{ display: \"none\" }} />\n            <div\n              id=\"notiInput\"\n              className=\"alert-danger\"\n              style={{ display: \"none\" }}\n            />\n            <div className=\"card__todo\">\n              {/* Uncompleted tasks */}\n              <ListTask />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","\nimport './App.css';\nimport  Todolist from'./todolist/index'\nfunction App() {\n  return (\n  <div>\n       <Todolist/>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import data from '../../todolist/data.json'\r\nlet initialState  ={\r\n    dataList:data\r\n}\r\nconst taskReducer = (state=initialState,action)=>{\r\n   switch(action.type)\r\n   {\r\n       case \"DELETE_TASK\":\r\n           {\r\n                 let vitri = state.dataList.findIndex((item)=>{\r\n                     return(item.id ===action.payload.id);\r\n                 });\r\n                 let deletaTask = [...state.dataList];\r\n                 deletaTask.splice(vitri,1);\r\n                 state.dataList=[...deletaTask];\r\n               return{...state}\r\n           }\r\n           case \"UPDATE_TASK\":\r\n            {\r\n                  let vitri = state.dataList.findIndex((item)=>{\r\n                      return(item.id ===action.payload.id);\r\n                  });\r\n                  let UpdateTask = [...state.dataList];\r\n               if(action.payload.status===\"comple\")\r\n               {\r\n                   UpdateTask[vitri].status='uncomple'\r\n               }\r\n               else\r\n               {\r\n                UpdateTask[vitri].status='comple'\r\n               }\r\n                  state.dataList=[...UpdateTask];\r\n                return{...state}\r\n            }\r\n            case \"ADD_TASK\":\r\n                {\r\n                    let addTask = [...state.dataList];\r\n                     let newTask ={id:Math.random(),status:'uncomple',textTask:action.payload};\r\n                      addTask.push(newTask);\r\n                      state.dataList=[...addTask];\r\n                    return{...state}\r\n                }\r\n       default:\r\n           return{...state}\r\n   }\r\n}\r\nexport default taskReducer;","import {combineReducers} from 'redux'\r\nimport taskReducer from './task'\r\nconst rootReducer = combineReducers({\r\n        taskReducer:taskReducer,\r\n});\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux'\nimport rootReducer from './Redux/Reducer/index'\nconst store = createStore(rootReducer)\nReactDOM.render(\n <Provider store={store}>\n     <App />\n </Provider>,\n  \n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}